<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="doXml" default="doXml" 
  xmlns:if="ant:if"
  xmlns:unless="ant:unless">
  
  <description>
    An argument may include an absolute or relative path.  
    If a path to a file is not specified, a global property value is applied.
    Argument for a FileSet may contain an absolute file name or a string containing wildcard characters.
    
    Example usage:
    
        ant -f doXml.ant transformXml 
          -DargXmlFileSet=????-SIGACTS_1.0-to-1.1.xml 
          -DargXslFile=SigAct_1.1MapToEnsit.xslt
    
        ant -f doXml.ant validateXml 
          -DargXmlFileSet=/home/g/sf_gPublished/Product/TSOA/Schema/SigAct/SigAct_100_Instance/????-SIGACTS_1*.* 
          -DargXsdFile=/home/g/sf_gPublished/Project/TSOA/Product/Schema/Product/2014Task1A_Ndr/SigActDataType110/SigAct_110/SigAct.xsd 
          -DargXmlNamespace=http://metadata.ces.mil/dse/ns/usmc/mc2sa/tsoa/sigact/sigact/1.1/sigact


    The following command displays main tasks and their description:

        ant -file doXml.ant -projecthelp
    
    
     --------------------------
    -- author:  George Moyano --
    -- version: 1.0.0         --
    -- updated: Dec 2015      --
     --------------------------
  </description>
  
  <property name="temp.file" value="ignore.ant"/>
<!--  <property name="test.output.dir" value="${basedir}/src/test/resources"/>-->
  <property name="base.xml.input.dir" 
    value="/home/g/sf_gPublished/Product/TSOA/Schema/SigAct/SigAct_100_Instance"/>
  <property name="base.xml.output.dir" 
    value="${basedir}/src/test/resources/xsl/output"/>
  <property name="base.xml.schema" value="${base.xsd.dir}/extension/Ensit.xsd"/>
  <property name="base.xml.namespace" 
    value="http://metadata.ces.mil/dse/ns/usmc/mc2sa/tsoa/mtf/ensit/0.2/ensit"/>
  <property name="base.schematron-iso.dir" 
    value="${basedir}/src/main/resources/validate/external/iso-schematron-xslt2-2010"/>
  <property name="base.schematron-niem.dir" 
    value="${basedir}/src/main/resources/validate/external/NIEM-NDR-3.0-2014-07-31"/>
  <property name="base.xsd.dir" value="${basedir}/src/main/resources/base-xsd"/>
  <property name="base.xsl.dir" value="${basedir}/src/main/resources/transform"/>
  <!--<property name="xsl-transformer" value="/usr/share/java/saxon/saxon.jar"/>-->
  <property name="xsl-transformer" value="/opt/SaxonHE9-7-0-1J/saxon9he.jar"/>
  <property name="schematron-validator"
    value="${basedir}/src/test/resources/lib/ant-schematron-2010-04-14.jar"/>

  <property name="test.schematron.dir" 
    value="${basedir}/src/test/resources/schematron"/>
  <property name="test.schematron.temp.dir" value="${test.schematron.dir}/temp"/>
  <property name="test.schematron.report.dir" value="${test.schematron.dir}/report"/>
  

  <macrodef name="schematron-test">
    <attribute name="schematronfile"/>
    <attribute name="reportdir"/>
    <attribute name="reportfilename"/>
    <attribute name="dirtovalidate"/>
    <attribute name="validatefilespec"/>
    <sequential>
      <local name="_saxonClassPathMatch"/>
      <echo message="class path to Saxon may be provided via ant command-line agrument '-lib' 
        for provider net.sf.saxon.TransformerFactoryImpl"/>
      <echo message="matching 'saxon' in Java ClassPath..."/>
      <script language="javascript">
        <![CDATA[
      var arrayJavaClassPath = project.getProperty('java.class.path').split(':');
      var keySaxonClassPathMatch;
      
      for (key = 0; key < arrayJavaClassPath.length; ++key) {
        value = arrayJavaClassPath[key];
        if (value.match(/saxon/i)) {
          keySaxonClassPathMatch = key;
          break;
        }
      }
      
      project.setProperty('_saxonClassPathMatch', arrayJavaClassPath[keySaxonClassPathMatch]);
      ]]>
      </script>
      <echo message="$${_saxonClassPathMatch}: ${_saxonClassPathMatch}"/>
      <echo message="$${schematron-validator}: ${schematron-validator}"/>
      <echo message="$${xsl-transformer}: ${xsl-transformer}"/>
      <taskdef name="schematrontask" 
        classname="com.schematron.ant.SchematronTask"
        classpath="${schematron-validator};${xsl-transformer}" 
        onerror="fail"/>
      <echo message="@@{schematronfile}: @{schematronfile}"/>
      <echo message="@@{reportdir}: @{reportdir}"/>
      <echo message="@@{reportfilename}: @{reportfilename}"/>
      <echo message="@@{dirtovalidate}: @{dirtovalidate}"/>
      <echo message="@@{validatefilespec}: @{validatefilespec}"/>
      <echo message="validating..."/>
      <schematrontask schema="@{schematronfile}"
        OutputDir="@{reportdir}" 
        outputFilename="@{reportfilename}"
        allow_foreign="true" debugMode="false" failOnError="false" queryLanguageBinding="xslt2" >
        <fileset dir="@{dirtovalidate}" includes="@{validatefilespec}"/>
      </schematrontask>
    </sequential>  
  </macrodef>
  
  <!-- Modified ISO Schematron 2010 for XSLT2 engines http://www.schematron.com/implementation.html -->
  <macrodef name="schematron-compile-test" >
    <!-- ISO Schematron 2010 validation based on XSLTs -->
    <attribute name="schematronfile"/>
    <attribute name="reportdir"/>
    <attribute name="dirtovalidate"/>
    <attribute name="validatefilespec"/>
    <sequential>
      <echo message="@@{schematronfile}: @{schematronfile}"/>
      <echo message="@@{reportdir}: @{reportdir}"/>
      <echo message="@@{dirtovalidate}: @{dirtovalidate}"/>
      <echo message="@@{validatefilespec}: @{validatefilespec}"/>     
      <!-- expand inclusions -->
      <xslt basedir="${test.schematron.dir}"
        style="${base.schematron-iso.dir}/iso_dsdl_include.xsl" 
        in="@{schematronfile}"  
        out="${test.schematron.temp.dir}/test1.sch"
        force="true"> 
        <classpath>
          <pathelement location="${xsl-transformer}"/>
        </classpath>
      </xslt>  
      <!-- expand abstract patterns -->
      <xslt basedir="${test.schematron.dir}"
        style="${base.schematron-iso.dir}/iso_abstract_expand.xsl" 
        in="${test.schematron.temp.dir}/test1.sch"  
        out="${test.schematron.temp.dir}/test2.sch"
        force="true"> 
        <classpath>
          <pathelement location="${xsl-transformer}"/>
        </classpath>
      </xslt>
      <!-- compile it -->
      <xslt basedir="${test.schematron.dir}"
        style="${base.schematron-iso.dir}/iso_svrl_for_xslt2.xsl" 
        in="${test.schematron.temp.dir}/test2.sch"  
        out="${test.schematron.temp.dir}/test.xsl"
        force="true"> 
        <classpath>
          <pathelement location="${xsl-transformer}"/>
        </classpath>
        <param name="allow-foreign" expression="true"/>
      </xslt>
      <!-- validate -->
      <xslt basedir="@{dirtovalidate}"
        style="${test.schematron.temp.dir}/test.xsl" 
        destdir="@{reportdir}"
        extension=".svrl"
        force="true"> 
        <classpath>
          <pathelement location="${xsl-transformer}"/>
        </classpath>
        <fileset dir="@{dirtovalidate}" includes="@{validatefilespec}"/>
      </xslt>
    </sequential>
  </macrodef>

  <macrodef name="XslTransform">
    <attribute name="inFileDir"/>
    <attribute name="inFileSet"/>
    <attribute name="xslFileDir"/>
    <attribute name="xslFileName"/>
    <attribute name="outFileDir"/>
    <attribute name="outFileNameExtension"/>
    <sequential>
      <!--<xslt in="@{inFileDir}/@{inFileSet}" 
        out="@{outFileDir}/@{inFileSet}_@{xslFileName}_output.@{outFileNameExtension}"
        style="@{xslFileDir}/@{xslFileName}" force="true">-->
      <!--<local name="file.set"/>-->
      <!-- read fileset into a property formatted as a list of lines -->
      <!--<pathconvert property="file.set" pathsep="${line.separator}">
        <map from="@{inFileDir}${file.separator}" to=""/>
        <fileset includes="@{inFileSet}" dir="@{inFileDir}"/>
      </pathconvert>-->
      <xslt  
        destdir="@{outFileDir}" force="true"
        style="@{xslFileDir}/@{xslFileName}" useimplicitfileset="false">
        <chainedmapper>
          <flattenmapper/>
          <mapper from="*" to="*_@{xslFileName}_output.@{outFileNameExtension}" type="glob"/>  
        </chainedmapper>
        <classpath path="${xsl-transformer}"/>
        <fileset includes="@{inFileSet}" dir="@{inFileDir}"/>        
      </xslt>
    </sequential>
  </macrodef>
  
  <macrodef name="XmlSchemaValidate">
    <attribute name="inXmlDir"/>
    <attribute name="inXmlFileSet" default="*.xml"/>
    <attribute name="xsdFile"/>
    <attribute name="inXmlNamespace"/>
    <sequential>
      <schemavalidate failonerror="true">
        <fileset includes="@{inXmlFileSet}" dir="@{inXmlDir}"/>
        <schema file="@{xsdFile}" namespace="@{inXmlNamespace}"/>
      </schemavalidate>
    </sequential>
  </macrodef>
  
  <target name="cleanOutputDir">
    <delete dir="${output,dir}"/>
    <mkdir dir="${output,dir}"/>
  </target>

  <target name="generateCopy">
    <xslt style="${base.xsl.dir}/???" destdir="" basedir="">
      <classpath path="${xsl-transformer}"/>
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <fileset dir=".">
        <include name="*.xml"/>
      </fileset>
    </xslt>
  </target>

<!--  <target name="validateSchema">
    <echo message="$${inFile}: ${inFile}"/>
    <echo message="$${xsdFile}: ${xsdFile}"/>
    <!-\-    <schemavalidate file="src/main/resources/iep-sample/mtf6040ENSITinstance1novalues.xml"
      classpath="/usr/share/java/saxon/saxon.jar" classname="net.sf.saxon.jxp.ValidatingReader">-\->
    <schemavalidate file="${basedir}/src/test/resources/xsl/output/${inFile}" >
      <schema url="file://${basedir}/src/main/resources/base-xsd/extension/Ensit.xsd"
        namespace="http://metadata.ces.mil/dse/ns/usmc/mc2sa/tsoa/mtf/ensit/0.2/ensit"/>
    </schemavalidate>
  </target>-->

<!--  <target name="validateSchematron">
    <local name="_saxonClassPathMatch"/>
    <echo message="class path to Saxon may be provided via ant command-line agrument '-lib' 
      for provider net.sf.saxon.TransformerFactoryImpl"/>
    <echo message="matching 'saxon' in Java ClassPath..."/>
    <script language="javascript">
      <![CDATA[
      var arrayJavaClassPath = project.getProperty('java.class.path').split(':');
      var keySaxonClassPathMatch;
      
      for (key = 0; key < arrayJavaClassPath.length; ++key) {
        value = arrayJavaClassPath[key];
        if (value.match(/saxon/i)) {
          keySaxonClassPathMatch = key;
          break;
        }
      }
      
      project.setProperty('_saxonClassPathMatch', arrayJavaClassPath[keySaxonClassPathMatch]);
      ]]>
    </script>
    <echo message="$${_saxonClassPathMatch}: ${_saxonClassPathMatch}"/>
    <echo message="$${schematron-validator}: ${schematron-validator}"/>
    <echo message="$${xsl-transformer}: ${xsl-transformer}"/>
    <taskdef name="schematron" 
      classname="com.schematron.ant.SchematronTask"
      classpath="${schematron-validator};${xsl-transformer}" onerror="fail"/>
    <echo message="$${schematron-dir}: ${test.schematron.dir}"/>
    <echo message="validate.source.dir: ${base.xsd.dir}"/>
    <echo message="validating..."/>
    
    <schematron schema="${test.schematron.dir}/generated-schema.sch"
      file="${base.xsd.dir}/niem/domains/militaryOperations/3.1/mo.xsd"
      OutputDir="${test.schematron.report.dir}" 
      outputFilename="test.svrl"
      debugMode="false" failOnError="true" queryLanguageBinding="xslt2">
    </schematron>
  </target>-->
  
  <target name="validateNiemMoSchema">
    <schematron-test schematronfile="${test.schematron.dir}/generated-schema.sch"
      reportdir="${test.schematron.report.dir}"
      reportfilename="niem-generated-schema.svrl"
      dirtovalidate="${base.xsd.dir}/niem/domains/militaryOperations/3.1"
      validatefilespec="*.xsd"/>
  </target>
  
<!--  <target name="validateNiemConformance">
<!-\- gISSUE: schematron import functions may not be accessible  
    If this is the case, did not find a means to access the import functions -\->
    <echo message="copying test dependencies to working temp folder..."/>
    <copy todir="src/test/resources/schematron/temp">
      <fileset 
        dir="$base.schematron-niem.dir"
        includes="ndr-functions*.xsl"/>
    </copy>
    <schematron schematronfile="${base.schematron-niem.dir}/ndr-rules-conformance-target-ext.sch"
      reportdir="${test.schematron.report.dir}"
      reportfilename="ndr-rules-conformance-target-ext.svrl"
      dirtovalidate="${base.xsd.dir}/extension"
      validatefilespec="Ensit.xsd"/>
  </target>
-->  
  
  <target name="validateNiemConformance">
    <echo message="copying test dependencies to working temp folder..."/>
    <copy todir="${test.schematron.temp.dir}">
      <fileset 
        dir="${base.schematron-niem.dir}"
        includes="ndr-functions*.xsl"/>
    </copy>
    <schematron-compile-test 
      schematronfile="${base.schematron-niem.dir}/ndr-rules-conformance-target-ext.sch"
      reportdir="${test.schematron.report.dir}"
      dirtovalidate="${base.xsd.dir}/extension"
      validatefilespec="*.xsd"/>
  </target>
  
  <target name="transformXml"
    description="Optional arguments: [argXmlFileSet] [argXslFile] [argOutputDir]">

    <local name="inputXml.dir"/>
    <local name="inputXmlFile.dir"/>
    <local name="inputXmlFile.set"/>
    <local name="xmlFile.set"/>
    <local name="xslFile.dir"/>
    <local name="xslFile.name"/>
    <local name="xsl.dir"/>
    <local name="output.dir"/>
    <condition property="xmlFile.set" value="${argXmlFileSet}" else="*.xml">
      <isset property="argXmlFileSet"/>
    </condition>
    <dirname property="inputXmlFile.dir" file="${xmlFile.set}"/>
    <basename property="inputXmlFile.set" file="${xmlFile.set}"/>
    <condition property="inputXml.dir" 
      value="${base.xml.input.dir}" 
      else="${inputXmlFile.dir}">
      <equals arg1="${inputXmlFile.dir}" arg2="${basedir}"/>
    </condition>
    <dirname property="xslFile.dir" file="${argXslFile}"/>
    <basename property="xslFile.name" file="${argXslFile}"/>
    <condition property="xsl.dir" 
      value="${base.xsl.dir}" 
      else="${xslFile.dir}">
      <equals arg1="${xslFile.dir}" arg2="${basedir}"/>
    </condition>
    <condition property="output.dir" 
      value="${argOutputDir}" 
      else="${base.xml.output.dir}">
      <isset property="argOutputDir"/>
    </condition>
    <echo message="$${inputXml.dir}: ${inputXml.dir}"/>
    <echo message="$${inputXmlFile.set}: ${inputXmlFile.set}"/>
    <echo message="$${xsl.dir}: ${xsl.dir}"/>
    <echo message="$${xslFile.name}: ${xslFile.name}"/>
    <echo message="$${output.dir}: ${output.dir}"/>
    <XslTransform 
      inFileDir="${inputXml.dir}"
      inFileSet="${inputXmlFile.set}"
      xslFileDir="${xsl.dir}"
      xslFileName="${xslFile.name}"
      outFileDir="${output.dir}"
      outFileNameExtension="xml"/>  
  </target>
  
  <target name="validateXml"
    description="Arguments: [argXmlFileSet] [argXsdFile] [argXmlNamespace]">
    <local name="inputXml.dir"/>
    <local name="inputXmlFile.dir"/>
    <local name="inputXmlFile.set"/>
    <local name="xmlFile.set"/>
    <local name="xsdFile"/>
    <local name="xmlNamespace"/>
    <condition property="xmlFile.set" value="${argXmlFileSet}" else="*.xml">
      <isset property="argXmlFileSet"/>
    </condition>
    <dirname property="inputXmlFile.dir" file="${xmlFile.set}"/>
    <basename property="inputXmlFile.set" file="${xmlFile.set}"/>
    <condition property="inputXml.dir" 
      value="${base.xml.output.dir}" 
      else="${inputXmlFile.dir}">
      <equals arg1="${inputXmlFile.dir}" arg2="${basedir}"/>
    </condition>
    <condition property="xsdFile" 
      value="${argXsdFile}" 
      else="${base.xml.schema}">
      <isset property="argXsdFile"/>
    </condition>
    <condition property="xmlNamespace" 
      value="${argXmlNamespace}" 
      else="${base.xml.namespace}">
      <isset property="argXmlNamespace"/>
    </condition>
    <echo message="$${inputXml.dir}: ${inputXml.dir}"/>
    <echo message="$${inputXmlFile.set}: ${inputXmlFile.set}"/>
    <echo message="$${xsdFile}: ${xsdFile}"/>
    <echo message="$${xmlNamespace}: ${xmlNamespace}"/>
    <XmlSchemaValidate
      inXmlDir="${inputXml.dir}"
      inXmlFileSet="${inputXmlFile.set}"
      xsdFile="${xsdFile}"
      inXmlNamespace="${xmlNamespace}"/>
  </target>
  
  <extension-point name="doXml" depends=""/>
</project>
